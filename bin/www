#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mellews-noview:server');
var http = require('http');
var colors = require('colors');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('request', onRequest);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
function onRequest(request, req) {
  var res = req.req.res;
  var reqMeth = req.req.method;
  var reqReso = req.req.path;
  var reqIp = req.req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  var reqTime = new Date;
  if (reqIp == "::1") {
    reqIp = "local";
  }
  console.log(colors.yellow("[Request]") + colors.grey(" IP: " + colors.white(reqIp) + ", Method: " + colors.white(reqMeth) + ", Resource: " + colors.white(reqReso)));
  res.on('finish', function () {
    var codeString = res.statusCode.toString();
    if (codeString.startsWith("2")) {
      var statCol = colors.green;
    }
    else if (codeString.startsWith("3")) {
      var statCol = colors.cyan;
    }
    else if (codeString.startsWith("4")) {
      var statCol = colors.yellow;
    }
    else if (codeString.startsWith("5")) {
      var statCol = colors.red;
    }
    else {
      var statCol = colors.grey;
    }
    console.log(colors.cyan("[Response]") + statCol(" " + res.statusCode + " - " + res.statusMessage));
  });
}